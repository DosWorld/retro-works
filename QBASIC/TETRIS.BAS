DEFINT A-Z
DIM SHARED BITMASK(16) AS INTEGER
TYPE BlockDataT
  w AS INTEGER
  h AS INTEGER
  r AS INTEGER
  rx AS INTEGER
  ry AS INTEGER
  map AS INTEGER
  col AS INTEGER
END TYPE
COMMON STAGEW, STAGEH, BLOCKX, BLOCKY, BLOCKCUR, BLOCKNEXT, SCORE
DIM SHARED BLOCK(19) AS BlockDataT
DIM SHARED STAGE(20, 10) AS INTEGER
DECLARE FUNCTION HITTEST(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
DECLARE SUB NEWBLOCK()
DECLARE SUB MOVE(DIR AS INTEGER)
DECLARE SUB ROTATE()
DECLARE SUB DROP()
DECLARE SUB FREEZE()
DECLARE SUB REDUCE()
DECLARE SUB DRAWBLOCK(CL AS INTEGER)
DECLARE SUB DRAWSTAGE()

FOR I = 0 TO 14
  BITMASK[I] = 2^I
NEXT I
DATA 2,2,0,0,0,&H0F,1
DATA 4,1,2,0,2,&H0F,2
DATA 1,4,0,2,1,&H0F,2
DATA 2,3,0,1,4,&H2D,3
DATA 3,2,1,1,3,&H1E,3
DATA 2,3,0,1,6,&H1E,4
DATA 3,2,1,1,5,&H33,4
DATA 2,3,0,1,8,&H2E,5
DATA 3,2,1,1,9,&H17,5
DATA 2,3,1,1,10,&H1D,5
DATA 3,2,1,0,7,&H3A,5
DATA 2,3,1,1,12,&H2B,6
DATA 3,2,1,0,13,&H0F,6
DATA 2,3,0,1,14,&H35,6
DATA 3,2,1,1,11,&H3C,6
DATA 2,3,0,1,16,&H17,7
DATA 3,2,1,1,17,&H39,7
DATA 2,3,1,1,18,&H3A,7
DATA 3,2,1,0,15,&H27,7
FOR I = 0 TO 18
  READ BLOCK(I).w, BLOCK(I).h, BLOCK(I).rx, BLOCK(I).ry, BLOCK(I).r, BLOCK(I).map, BLOCK(I).col
NEXT I
STAGEW = 10 : STAGEH = 20 : SCORE = 0
FOR Y=0 TO STAGEH-1: FOR X=0 TO STAGEW-1
  STAGE(Y,X)=0
NEXT X: NEXT Y
RANDOMIZE TIMER
BLOCKNEXT = (RND * 100) MOD 19 : CALL NEWBLOCK

STAGE(19,2) = 6
STAGE(19,3) = 6
STAGE(19,5) = 6
STAGE(19,6) = 6
FOR I = 0 TO STAGEW-1
  STAGE(18,I) = 2
NEXT I
CALL DROP
CLS: CALL FREEZE: CALL DRAWSTAGE
WHILE INPUT$(1) = "": WEND
CALL REDUCE : CALL DRAWSTAGE
PRINT SCORE
END

FUNCTION HITTEST(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
  SHARED STAGEW, STAGEH
  RES = 0 : W = B.w : H = B.h
  FOR Y = 0 TO H-1: FOR X = 0 TO W-1
    IF (B.map AND BITMASK(X+Y*W)) <> 0 THEN
      SX = X0 + X : SY = Y0 + Y
      IF SX < 0 OR SX >= STAGEW OR SY >= STAGEH THEN
        RES = 1 : GOTO ENDFUNC
      ELSEIF SY >= 0 AND STAGE(SY,SX) <> 0 THEN
        RES = 1 : GOTO ENDFUNC
      END IF
    END IF
  NEXT X: NEXT Y
ENDFUNC:
  HITTEST = RES
END FUNCTION

SUB MOVE(DIR AS INTEGER)
  SHARED BLOCKX, BLOCKY
  IF HITTEST(BLOCK(BLOCKCUR), BLOCKX, BLOCKY) <> 0 THEN
    EXIT SUB
  END IF
  BLOCKX = BLOCKX + DIR
END SUB

SUB ROTATE
  SHARED BLOCKX, BLOCKY, BLOCKCUR
  DIM B0 AS BlockDataT, B AS BlockDataT
  B0 = BLOCK(BLOCKCUR) : B = BLOCK(B0.r)
  X = BLOCKX + B0.rx - B.rx : Y = BLOCKY + B0.ry - B.ry
  IF HITTEST(B, X, Y) THEN
    IF HITTEST(B, X - 1, Y) THEN
      X = X - 1
    ELSEIF HITTEST(B, X + 1, Y) THEN
      X = X + 1
    ELSE
      EXIT SUB
    END IF
  END IF
  BLOCKX = X : BLOCKY = Y : BLOCKCUR = B0.r
END SUB

SUB DROP
  SHARED BLOCKX, BLOCKY, BLOCKCUR
  WHILE HITTEST(BLOCK(BLOCKCUR), BLOCKX, BLOCKY + 1) = 0
    BLOCKY = BLOCKY + 1
  WEND
END SUB

SUB FREEZE
  SHARED BLOCKX, BLOCKY, BLOCKCUR
  W = BLOCK(BLOCKCUR).w : H = BLOCK(BLOCKCUR).h
  FOR Y = 0 TO H-1 : FOR X = 0 TO W-1
    IF (BLOCK(BLOCKCUR).map AND BITMASK(X+Y*W)) <> 0 THEN
      STAGE(Y+BLOCKY, X+BLOCKX) = BLOCK(BLOCKCUR).col
    END IF
  NEXT X : NEXT Y
END SUB

SUB REDUCE
  SHARED STAGEW, STAGEH, SCORE
  Y = STAGEH - 1: REDUCED = 0
  WHILE Y >= 0
    FULL = 1
    FOR X = 0 TO STAGEW-1
      IF STAGE(Y, X)=0 THEN
        FULL = 0 : EXIT FOR
      END IF
    NEXT X
    IF FULL = 0 THEN
      Y = Y-1
    ELSE
      FOR X = 0 TO STAGEW-1
        FOR Y1 = Y TO 1 STEP -1
          STAGE(Y1, X)=STAGE(Y1-1, X)
        NEXT Y1
        STAGE(0, X)=0
      NEXT X
      REDUCED = REDUCED + 1
    END IF
  WEND
  IF REDUCED > 0 THEN
    SCORE = SCORE + REDUCED ^ 3
    BEEP
  END IF
END SUB

SUB NEWBLOCK
  SHARED BLOCKX, BLOCKY, BLOCKCUR, BLOCKNEXT, STAGEW
  BLOCKCUR = BLOCKNEXT: BLOCKNEXT = (RND * 100) MOD 19
  BLOCKX = INT((STAGEW - BLOCK(BLOCKCUR).w) / 2): BLOCKY = 0
END SUB

SUB DRAWBLOCK(CL AS INTEGER)
  SHARED BLOCKX, BLOCKY, BLOCKCUR, STAGEW, STAGEH
  W = BLOCK(BLOCKCUR).w : H = BLOCK(BLOCKCUR).h
  FOR Y = 0 TO H-1 : FOR X = 0 TO W-1
    IF (BLOCK(BLOCKCUR).map AND BITMASK(X+Y*W)) <> 0 THEN
      X1 = BLOCKX + X: Y1 = BLOCKY + Y
      IF X1 >= 0 AND X1 < STAGEW AND Y1 >= 0 AND Y1 < STAGEH THEN
        LOCATE Y1+1, X1+1
        IF CL > 0 THEN
          PRINT ".";
        ELSE
          PRINT "#";
        END IF
      END IF
    END IF
  NEXT X : NEXT Y
END SUB

SUB DRAWSTAGE
  SHARED BLOCKX, BLOCKY, BLOCKCUR, STAGEW, STAGEH
  FOR Y = 0 TO STAGEH-1: FOR X = 0 TO STAGEW-1
    LOCATE Y+1, X+1
    IF STAGE(Y,X) > 0 THEN
      PRINT "*";
    ELSE
      PRINT " ";
    END IF
  NEXT X: NEXT Y
END SUB

