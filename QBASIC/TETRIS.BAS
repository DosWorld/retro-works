DEFINT A-Z
DIM SHARED BITMASK(16) AS INTEGER
TYPE BlockDataT
  w AS INTEGER
  h AS INTEGER
  r AS INTEGER
  rx AS INTEGER
  ry AS INTEGER
  map AS INTEGER
  col AS INTEGER
END TYPE
COMMON STAGEW, STAGEH
DIM SHARED BLOCK(19) AS BlockDataT
DIM SHARED STAGE(20, 10) AS INTEGER
DECLARE FUNCTION HITTEST(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
DECLARE FUNCTION FREEZE(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
DECLARE FUNCTION REDUCE()

STAGEW = 10 : STAGEH = 20
RANDOMIZE TIMER
FOR I = 0 TO 14
  BITMASK[I] = 2^I
NEXT I

DATA 2,2,0,0,0,&H0F,1
DATA 4,1,2,0,2,&H0F,2
DATA 1,4,0,2,1,&H0F,2
DATA 2,3,0,1,4,&H2D,3
DATA 3,2,1,1,3,&H1E,3
DATA 2,3,0,1,6,&H1E,4
DATA 3,2,1,1,5,&H33,4
DATA 2,3,0,1,8,&H2E,5
DATA 3,2,1,1,9,&H17,5
DATA 2,3,1,1,10,&H1D,5
DATA 3,2,1,0,7,&H3A,5
DATA 2,3,1,1,12,&H2B,6
DATA 3,2,1,0,13,&H0F,6
DATA 2,3,0,1,14,&H35,6
DATA 3,2,1,1,11,&H3C,6
DATA 2,3,0,1,16,&H17,7
DATA 3,2,1,1,17,&H39,7
DATA 2,3,1,1,18,&H3A,7
DATA 3,2,1,0,15,&H27,7
FOR I = 0 TO 18
  READ BLOCK(I).w, BLOCK(I).h, BLOCK(I).rx, BLOCK(I).ry, BLOCK(I).r, BLOCK(I).map, BLOCK(I).col
NEXT I

FUNCTION HITTEST(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
  SHARED STAGEW, STAGEH
  RES = 0 : W = B.w : H = B.h
  FOR Y = 0 TO H-1
    FOR X = 0 TO W-1
      IF (BLOCK(I).map AND BITMASK(X+Y*W)) <> 0 THEN
        SX = X0 + X : SY = Y0 + Y
        IF SX < 0 OR SX >= STAGEW OR SY > STAGEH THEN
          RES = 1 : EXIT FOR
        ELSEIF SY >= 0 AND STAGE(SY,SX) <> 0 THEN
          RES = 1 : EXIT FOR
        END IF
      END IF
    NEXT X 
    IF RES = 1 THEN EXIT FOR
  NEXT Y
  HITTEST = RES
END FUNCTION
